import streamlit as st
import pandas as pd
import ssl
import altair as alt

# üîß –û–±—Ö–æ–¥ SSL
ssl._create_default_https_context = ssl._create_unverified_context

# üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ü—Ä–æ—Å—Ç–æ–π –¥–∞—à–±–æ—Ä–¥ Google Sheets")

# üîó CSV-—Å—Å—ã–ª–∫–∞
url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSigXcrNvRJII0f0bRwOhUGr4r5chw6NqxGjuiw2H18PlcdoAuewonaMGgE_oy4a5MHbzVifX67wulr/pub?output=csv'

# üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv(url)

# ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–µ—Å–ª–∏ Unnamed: 0)
if 'Unnamed: 0' in df.columns:
    df.rename(columns={'Unnamed: 0': '–ö–æ–º–ø–∞–Ω–∏—è'}, inplace=True)

# üîÑ –ó–∞–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π
df['–ö–æ–º–ø–∞–Ω–∏—è'] = df['–ö–æ–º–ø–∞–Ω–∏—è'].replace({
    '–ê–ª—å—Ñ–∞': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
    '–û–∑–æ–Ω': 'Ozon'
})

# üî† –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
company_list_sorted = sorted(df['–ö–æ–º–ø–∞–Ω–∏—è'].unique())

# ‚öôÔ∏è Session state –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
if 'selected_companies' not in st.session_state:
    st.session_state.selected_companies = company_list_sorted

# üîò –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–π
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏"):
        st.session_state.selected_companies = company_list_sorted
with col2:
    if st.button("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏"):
        st.session_state.selected_companies = []
with col3:
    if st.button("–í—ã–±—Ä–∞—Ç—å –¢–û–ü-5"):
        top5 = ['–ê–≤–∏—Ç–æ', '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', '–¢-–±–∞–Ω–∫', '–Ø–Ω–¥–µ–∫—Å', 'Ozon']
        st.session_state.selected_companies = [c for c in top5 if c in df['–ö–æ–º–ø–∞–Ω–∏—è'].unique()]

# üîç –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–π
companies = st.multiselect(
    "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    options=company_list_sorted,
    default=st.session_state.selected_companies,
    key="selected_companies"
)

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ –ø–æ—Ä—è–¥–∫–∞ –ø–ª–æ—â–∞–¥–æ–∫
platform_order = ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–∞–π—Ç—ã', 'HH', 'Getmatch', 'Habr Career']
platform_colors = {
    'Getmatch': 'yellow',
    'HH': 'red',
    'Habr Career': 'green',
    '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–∞–π—Ç—ã': 'skyblue'
}

# üîç –§–∏–ª—å—Ç—Ä –ø–ª–æ—â–∞–¥–æ–∫
if 'selected_platforms' not in st.session_state:
    st.session_state.selected_platforms = platform_order

selected_platforms = st.multiselect(
    "–í—ã–±–µ—Ä–∏ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    options=platform_order,
    default=st.session_state.selected_platforms,
    key="selected_platforms"
)

# üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame
filtered_df = df[df['–ö–æ–º–ø–∞–Ω–∏—è'].isin(companies)]

# üî∑ **–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ü–≤–µ—Ç–Ω–æ–π –ª–µ–≥–µ–Ω–¥—ã**
def render_platform_legend():
    legend_html = ""
    for p in selected_platforms:
        color = platform_colors[p]
        legend_html += f"<span style='font-size:12px; color:{color}; font-weight:bold'>‚¨§ {p}</span> &nbsp;&nbsp;"
    st.markdown(legend_html, unsafe_allow_html=True)

# üìà **Bar chart**
st.subheader("Bar chart: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏)")
render_platform_legend()

if not filtered_df.empty:
    bar_df = filtered_df[['–ö–æ–º–ø–∞–Ω–∏—è'] + selected_platforms]
    vacancies_sum = bar_df.drop(columns=['–ö–æ–º–ø–∞–Ω–∏—è']).sum().reindex(selected_platforms).reset_index()
    vacancies_sum.columns = ['–ü–ª–æ—â–∞–¥–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    color_scale = alt.Scale(domain=selected_platforms,
                            range=[platform_colors[p] for p in selected_platforms])

    bar_chart = alt.Chart(vacancies_sum).mark_bar().encode(
        x=alt.X('–ü–ª–æ—â–∞–¥–∫–∞', sort=selected_platforms),
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        color=alt.Color('–ü–ª–æ—â–∞–¥–∫–∞', scale=color_scale, legend=None)
    ).properties(width=700)

    st.altair_chart(bar_chart)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–ø–∞–Ω–∏—é.")

# üìà **Line chart**
st.subheader("Line chart: –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
render_platform_legend()

if not filtered_df.empty:
    line_df = filtered_df[['–ö–æ–º–ø–∞–Ω–∏—è'] + selected_platforms]
    # ‚û°Ô∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã –≤–∞–∫–∞–Ω—Å–∏–π
    line_df['–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π'] = line_df[selected_platforms].sum(axis=1)
    line_df = line_df.sort_values('–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π', ascending=False)
    line_df.drop(columns=['–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π'], inplace=True)

    # melt –¥–ª—è Altair
    line_df_melt = line_df.melt(id_vars='–ö–æ–º–ø–∞–Ω–∏—è', var_name='–ü–ª–æ—â–∞–¥–∫–∞', value_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    line_df_melt = line_df_melt[line_df_melt['–ü–ª–æ—â–∞–¥–∫–∞'].isin(selected_platforms)]

    line_chart = alt.Chart(line_df_melt).mark_line(point=True).encode(
        x=alt.X('–ö–æ–º–ø–∞–Ω–∏—è', sort=line_df['–ö–æ–º–ø–∞–Ω–∏—è'].tolist()),
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        color=alt.Color('–ü–ª–æ—â–∞–¥–∫–∞', scale=color_scale, legend=None)
    ).properties(width=700)

    st.altair_chart(line_chart)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.")

# üñ•Ô∏è **–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É**
st.subheader("–î–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º")
st.dataframe(filtered_df, use_container_width=True)
